<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="generator" content="Adobe RoboHelp 11" />
<title>Screen Object</title>
<link rel="StyleSheet" href="SecureCRT.css" type="text/css" />
<style type="text/css">
<!--
.BannerBase { font-size:14pt;
font-weight:bold;
margin:0pt 1px 0pt 0pt;
font-family:Arial, sans-serif;
fhname:Banner Base; }
.Base { font-size:10pt;
margin:0pt 1px 0pt 0pt;
font-family:Arial, sans-serif; }
.Base1 { font-size:10pt;
margin:6pt 0pt 6pt 0pt;
font-family:System, sans-serif;
fhname:Base#1; }
.Base025indent { font-size:10pt;
margin:0pt 0pt 0pt 18pt;
font-family:Arial, sans-serif; }
.Base025indent1 { margin:0pt 0pt 0pt 18pt;
fhname:Base025indent#1; }
.Base025indhanging { font-size:10pt;
margin:0pt 0pt 0pt 18pt;
text-indent:18pt;
font-family:Arial, sans-serif; }
.Base050indent { font-size:10pt;
margin:0pt 0pt 0pt 36pt;
font-family:Arial, sans-serif; }
.Base050indent1 { margin:0pt 0pt 0pt 36pt;
fhname:Base050indent#1; }
.Base050indhanging { font-size:10pt;
margin:0pt 0pt 0pt 36pt;
text-indent:36pt;
font-family:Arial, sans-serif; }
.Base075indent { font-size:10pt;
margin:0pt 0pt 0pt 54pt;
font-family:Arial, sans-serif; }
.BigBoldBase { font-size:11pt;
font-weight:bold;
margin:0pt 0pt 0.05in 0pt;
font-family:Arial, sans-serif; }
.BodyText2 { margin:0pt 0pt 0pt 0.3in;
font-family:Arial, sans-serif;
fhname:Body Text 2; }
.BodyTextIndent2 { margin:0pt 0pt 0pt 0.6in;
font-family:Arial, sans-serif;
fhname:Body Text Indent 2; }
.Bullet1 { font-size:10pt;
margin:0pt 0pt 2pt 0.2097in;
text-indent:-0.2097in;
font-family:Arial, sans-serif; }
.bullet11 { font-size:8pt;
margin:0pt 0.014in 0pt 0.2in;
text-indent:-0.2in;
font-family:Arial, sans-serif;
fhname:bullet1#1; }
.Bullet2 { font-size:10pt;
margin:0pt 0pt 0pt 36pt;
text-indent:-18pt;
font-family:Arial, sans-serif; }
.Bullet3 { font-size:10pt;
margin:0pt 0pt 0pt 54pt;
font-family:Arial, sans-serif; }
.Bullet4 { font-size:10pt;
margin:0pt 0pt 0pt 72pt;
text-indent:72pt;
font-family:Arial, sans-serif; }
CODE { font-size:10pt;
font-family:"Courier New" , sans-serif;
fhtype:character; }
.CODE1 { font-size:10pt;
font-family:"Courier New" , sans-serif;
fhname:CODE#1;
fhtype:character; }
.CodeText { font-size:10pt;
font-family:"Courier New" , sans-serif; }
.CodeText075Indent { font-size:10pt;
margin:0pt 0pt 0pt 54pt;
font-family:"Courier New" , sans-serif; }
.DefaultParagraphFont { font-size:12pt;
font-family:"Times New Roman" , sans-serif;
fhname:Default Paragraph Font;
fhtype:character; }
.DefaultParagraphFont1 { font-size:12pt;
font-family:"Times New Roman" , sans-serif;
fhname:Default Paragraph Font#1;
fhtype:character; }
.Dialog { font-size:10pt;
font-weight:bold;
font-family:Arial, sans-serif;
fhtype:character; }
.Entry { font-size:10pt;
font-family:"Courier New" , sans-serif; }
.Entry025indent { font-size:10pt;
margin:0pt 0pt 0pt 18pt;
font-family:"Courier New" , sans-serif; }
.Entry025indent1 { margin:6pt 0pt 6pt 18pt;
font-family:"Courier New" , sans-serif;
fhname:Entry025indent#1; }
.Entry050indent { font-size:10pt;
margin:0pt 0pt 0pt 36pt;
font-family:"Courier New" , sans-serif; }
.Entry075indent { font-size:10pt;
margin:0pt 0pt 0pt 54pt;
font-family:"Courier New" , sans-serif; }
.Entry100indent { font-size:10pt;
margin:0pt 0pt 0pt 72pt;
font-family:"Courier New" , sans-serif; }
.ExampleProgram { font-size:10pt;
font-family:"Courier New" , sans-serif; }
.Field { font-size:10pt;
font-weight:bold;
margin:0pt 0pt 0pt 18pt;
font-family:Arial, sans-serif; }
.Figure { font-style:italic; }
.footnotereference { font-size:12pt;
vertical-align:super;
font-family:"Times New Roman" , sans-serif;
fhname:footnote reference;
fhtype:character; }
.footnotetext { fhname:footnote text; }
.GlossaryTerm { font-size:11pt;
font-weight:bold;
margin:0pt 0pt 3pt 0pt;
font-family:Arial, sans-serif;
fhname:Glossary Term; }
.Group { font-size:10pt;
font-weight:bold;
margin:0.0166in 0pt 0.0166in 0pt;
font-family:Arial, sans-serif; }
.Heading { font-size:12pt;
font-weight:bold;
margin:12pt 0pt 6pt 0pt;
font-family:System, sans-serif; }
.heading1 { font-size:16pt;
font-weight:bold;
font-style:italic;
fhname:heading 1; }
.heading11 { font-weight:bold;
font-family:Arial, sans-serif;
fhname:heading 1#1; }
.heading2 { font-size:14pt;
font-weight:bold;
margin:0pt 0pt 0pt 18pt;
fhname:heading 2; }
.heading21 { font-weight:bold;
margin:0pt 0pt 0pt 0.3in;
font-family:Arial, sans-serif;
fhname:heading 2#1; }
.heading3 { font-size:12pt;
font-weight:bold;
margin:0pt 0pt 0pt 36pt;
fhname:heading 3; }
.heading4 { font-size:9pt;
font-weight:bold;
font-family:Arial, sans-serif;
fhname:heading 4;
text-decoration:overline; }
.heading41 { font-size:10pt;
font-weight:bold;
font-style:italic;
margin:0pt 0pt 0pt 36pt;
fhname:heading 4#1; }
.heading5 { font-size:9pt;
font-weight:bold;
margin:0pt 0pt 0pt 18pt;
font-family:Arial, sans-serif;
fhname:heading 5;
text-decoration:underline; }
.heading51 { font-size:11pt;
font-weight:bold;
margin:0pt 0pt 0pt 54pt;
fhname:heading 5#1; }
.heading5Body { font-size:9pt;
margin:0pt 0pt 0pt 36pt;
font-family:Arial, sans-serif;
fhname:heading 5:  Body; }
.heading6 { font-size:9pt;
font-weight:bold;
font-style:italic;
margin:0pt 0pt 0pt 36pt;
fhname:heading 6; }
.heading61 { font-weight:bold;
font-style:italic;
margin:0pt 0pt 0pt 72pt;
fhname:heading 6#1; }
.Heading6Body { font-size:10pt;
margin:0pt 0pt 0pt 54pt;
font-family:Arial, sans-serif;
fhname:Heading 6:  Body; }
.heading8 { font-weight:bold;
text-align:center;
fhname:heading 8; }
.Hyperlink { font-size:12pt;
color:#0000ff;
font-family:"Times New Roman" , sans-serif;
fhtype:character;
text-decoration:underline; }
.Hyperlink1 { font-size:12pt;
color:#0000ff;
font-family:"Times New Roman" , sans-serif;
fhname:Hyperlink#1;
fhtype:character;
text-decoration:underline; }
.Label1 { font-size:8pt;
font-weight:bold;
font-family:Arial, sans-serif;
fhname:Label#1;
fhtype:character; }
.MenuCommand { font-size:10pt;
font-weight:bold;
margin:12pt 0pt 0pt 0pt;
font-family:Arial, sans-serif; }
.MenuCommand2ndLevel { font-size:10pt;
font-weight:bold;
margin:6pt 0pt 0pt 18pt;
font-family:Arial, sans-serif; }
.NewCodeText { font-size:10pt;
margin:0pt 1px 0pt 0pt;
font-family:"Courier New" , sans-serif; }
.Normal { font-size:12pt;
margin:5pt 0pt 5pt 0pt;
font-family:"Times New Roman" , sans-serif; }
.Normal1 { font-size:10pt;
margin:0pt 1px 0pt 0pt;
font-family:"Times New Roman" , sans-serif;
fhname:Normal#1; }
.Normal2 { font-size:12pt;
margin:0pt 1px 0pt 0pt;
font-family:"Times New Roman" , sans-serif;
fhname:Normal#2; }
.Normal3 { font-size:12pt;
margin:0pt 1px 0pt 0pt;
font-family:Arial, sans-serif;
fhname:Normal#3; }
.NoteBold { font-size:10pt;
font-weight:bold;
font-family:Arial, sans-serif;
fhtype:character; }
.NoteTest025indent { font-size:10pt;
margin:0pt 0pt 0pt 36pt;
font-family:Arial, sans-serif; }
.NoteText { font-size:10pt;
margin:0pt 0pt 0pt 18pt;
font-family:Arial, sans-serif; }
.Number1 { font-size:10pt;
font-family:Arial, sans-serif; }
.Number2 { font-size:10pt;
font-family:Arial, sans-serif; }
.Number3 {  }
.Number4 {  }
.Number5 {  }
.ObjHead025Indent { font-size:10pt;
font-weight:bold;
margin:0pt 0pt 0.028in 18pt;
font-family:Arial, sans-serif;
text-decoration:underline; }
.ObjHead050Indent { font-size:10pt;
font-weight:bold;
font-style:italic;
margin:0pt 0pt 0pt 36pt;
font-family:Arial, sans-serif; }
.Seealso { margin:24pt 0pt 6pt 0pt; }
.Step { font-size:10pt;
margin:0pt 0pt 12pt 18pt;
text-indent:-18pt;
font-family:Arial, sans-serif; }
.Step2 { font-size:10pt;
margin:0pt 0pt 12pt 36pt;
text-indent:-18pt;
font-family:Arial, sans-serif; }
.TableBody { font-size:10pt;
margin:3pt 0pt 3pt 0pt;
font-family:Arial, sans-serif; }
body { background-color:#ffffff; }
-->
</style>
<!--ForeHelp.Ignore-->
<script src="./sniffer.js" type="text/javascript" language="JavaScript1.2"></script>
<script src="./hhscript.js" type="text/javascript" language="JavaScript1.2"></script>
<script src="./SecureCRT.js" type="text/javascript" language="JavaScript1.2"></script>
<script src="./fh_dhtml.js" type="text/javascript" language="JavaScript1.2"></script>
<!--ForeHelp.EndIgnore-->
<script type="text/javascript" language="JavaScript">
//<![CDATA[
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//]]>
</script>
<style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute;
left:0px;
top:0px;
z-index:4;
visibility:hidden; }
-->
</style>
<script type="text/javascript" language="javascript1.2" src="whmsg.js" charset="utf-8"></script>
<script type="text/javascript" language="javascript" src="whver.js" charset="utf-8"></script>
<script type="text/javascript" language="javascript1.2" src="whutils.js" charset="utf-8"></script>
<script type="text/javascript" language="javascript1.2" src="whproxy.js" charset="utf-8"></script>
<script type="text/javascript" language="javascript1.2" src="whlang.js" charset="utf-8"></script>
<script type="text/javascript" language="javascript1.2" src="whtopic.js" charset="utf-8"></script>

</head>

<body bgproperties="FIXED"><script type="text/javascript" language="javascript1.2">//<![CDATA[
<!--
if (window.gbWhTopic)
{
	var strUrl = document.location.href;
	var bc = 0;
	var n = strUrl.toLowerCase().indexOf("bc-");
	if(n != -1)
	{
		document.location.replace(strUrl.substring(0, n));
		bc = strUrl.substring(n+3);
	}

	if (window.addTocInfo)
	{
	addTocInfo("Scripting\nScript Objects Reference\nScreen Object");
addAvenueInfo("ActiveX Scripting","Session_Object.htm","Dialog_Object.htm");
addButton("show",BTN_TEXT,"Show","","","","",0,0,"","","");

	}
	if (window.writeBtnStyle)
		writeBtnStyle();

	if (window.writeIntopicBar)
		writeIntopicBar(1);

	
	document.write("<p style=\"text-align:right\"> ");
AddMasterBreadcrumbs("SecureCRT.htm", "", ">", "Home", "Welcome.htm");
document.write("<a href=\"Creating_Python_Scripts.htm\">Scripting<\/a> > <a href=\"Application_Object.htm\">Script Objects Reference<\/a> > Screen Object<\/p>");

}
else
	if (window.gbIE4)
		document.location.reload();

onLoadHandler = function()
{
  if (window.setRelStartPage)
	{
	setTimeout("setRelStartPage('SecureCRT.htm');", 1)

    setTimeout("UpdateBreadCrumbsMarker();", 1);
	}
}

if (window.addEventListener){  
	window.addEventListener('load', onLoadHandler, false);   
} else if (window.attachEvent){  
	window.attachEvent('onload', onLoadHandler);  
}

function onSetStartPage()
{
  autoSync(0);
  sendSyncInfo();
  sendAveInfoOut();
}
//-->
//]]></script>
<script type="text/javascript" src="./ehlpdhtm.js" language="JavaScript1.2"></script>



<!--ForeHelp.EndIgnore-->
<!--ForeHelp.Keyword KKEYS="scripting;scripting&#028;objects;scripting&#028;ActiveX"-->
<!--ForeHelp.EndKeyword-->
<!--ForeHelp.Banner-->
<p class="Banner"><span><img src="secureicon.bmp" alt="SecureCRT Icon" 
							 title="SecureCRT Icon" width="32" height="32" 
							 border="0" /></span> &#160;Screen Object</p>
<!--ForeHelp.Ignore-->
<hr align="center" />
<!--ForeHelp.EndIgnore--><!--ForeHelp.EndBanner-->
<p>&#160;</p>
<p class="SOH1">Description</p>
<p class="SingleSpaced025">The Screen object provides access to <span>Secure</span>CRT's 
 <a href="javascript:TextPopup(this)" id="HotSpot22034" class="glossterm">terminal</a><script type="text/javascript" language="JavaScript1.2">//<![CDATA[
TextPopupInit('HotSpot22034', 'POPUP22034');
//]]></script><span class="glosstext" id="POPUP22034" style="display: none;"> A device usually consisting of a keyboard, a display unit such as a cathode ray tube, and a serial port used for entering and sending data to a computer and displaying any data received from the computer.  Terminals are usually connected to a computer with a serial line or some other type of connection.  There are many terminal types including VT100, VT102, VT220, and others.</span> screen.</p>
<p class="SingleSpaced025">&#160;</p>
<p class="SOH1">Syntax</p>
<p class="Entry025single"><nobr style="white-space: nowrap;"><span style="white-space: nowrap;">S</span>creen.P<span><i>roperty</i> 
 [ = <i>expression</i> ]</span></nobr></p>
<p class="Entry025single"><nobr style="white-space: nowrap;"><span style="white-space: nowrap;">S</span><span>creen.<i>Method</i>([<i>arglist</i>])</span></nobr></p>
<p class="SingleSpaced025">&#160;</p>
<p class="SOH1">Remarks</p>
<p class="SingleSpaced025"><span>Secure</span>CRT's Screen object is accessed 
 through the top-level object’s <code><span style="font-family: 'Courier New', sans-serif;">Screen</span></code> 
 property.</p>
<p class="SingleSpaced025">&#160;</p>
<p class="SOH1"><u style="text-decoration: underline; ">Screen Object Properties 
 and Methods</u></p>
<table cellspacing="1">
	<tr>
		<td style="padding-left: 1px; padding-top: 1px; padding-right: 1px; 
			 padding-bottom: 1px;" width="192"><p class="BigBoldBase"><!--ForeHelp.Hotspot JUMP="Screen_Object_Properties"--><!--ForeHelp.EndHotspot--><a 
		 href="Screen_Object.htm#Screen_Object_Properties">Properties</a></p></td>
		<td style="padding-left: 1px; padding-top: 1px; padding-right: 1px; 
			 padding-bottom: 1px;" width="192"><p class="BigBoldBase"><!--ForeHelp.Hotspot JUMP="Screen_Object_Methods"--><!--ForeHelp.EndHotspot--><a 
		 href="Screen_Object.htm#Screen_Object_Methods">Methods</a></p></td>
	</tr>
	<tr>
		<td style="padding-left: 1px; padding-top: 1px; padding-right: 1px; 
			 padding-bottom: 1px;" height="15" width="192"><p class="Base">&#160;&#160;&#160;&#160;<!--ForeHelp.Hotspot JUMP="Screen_Object_Properties_CurrentColumn"--><!--ForeHelp.EndHotspot--><a 
		 href="Screen_Object.htm#Screen_Object_Properties_CurrentColumn">CurrentColumn</a></p></td>
		<td style="padding-left: 1px; padding-top: 1px; padding-right: 1px; 
			 padding-bottom: 1px;" height="15" width="192"><p class="Base">&#160;&#160;&#160;&#160;<!--ForeHelp.Hotspot JUMP="Screen_Object_Methods_Clear"--><!--ForeHelp.EndHotspot--><a 
		 href="Screen_Object.htm#Screen_Object_Methods_Clear">Clear</a></p></td>
	</tr>
	<tr>
		<td style="padding-left: 1px; padding-top: 1px; padding-right: 1px; 
			 padding-bottom: 1px;" height="15" width="192"><p class="Base">&#160;&#160;&#160;&#160;<!--ForeHelp.Hotspot JUMP="Screen_Object_Properties_CurrentRow"--><!--ForeHelp.EndHotspot--><a 
		 href="Screen_Object.htm#Screen_Object_Properties_CurrentRow">CurrentRow</a></p></td>
		<td style="padding-left: 1px; padding-top: 1px; padding-right: 1px; 
			 padding-bottom: 1px;" height="15" width="192"><p class="Base">&#160;&#160;&#160;&#160;<!--ForeHelp.Hotspot JUMP="Screen_Object_Methods_Get"--><!--ForeHelp.EndHotspot--><a 
		 href="Screen_Object.htm#Screen_Object_Methods_Get1">Get</a></p></td>
	</tr>
	<tr>
		<td style="padding-left: 1px; padding-top: 1px; padding-right: 1px; 
			 padding-bottom: 1px;" height="15" width="192"><p class="Base">&#160;&#160;&#160;&#160;<!--ForeHelp.Hotspot JUMP="Screen_Object_Properties_Columns"--><!--ForeHelp.EndHotspot--><a 
		 href="Screen_Object.htm#Screen_Object_Properties_Columns">Columns</a></p></td>
		<td style="padding-left: 1px; padding-top: 1px; padding-right: 1px; 
			 padding-bottom: 1px;" height="15" width="192"><p class="Base">&#160;&#160;&#160;&#160;<a 
		 href="#Get2">Get2</a></p></td>
	</tr>
	<tr>
		<td style="padding-left: 1px; padding-top: 1px; padding-right: 1px; 
			 padding-bottom: 1px;" height="15" width="192"><p class="Base">&#160;&#160;&#160;&#160;<a 
		 href="#Screen_Object_Properties_IgnoreEscape"><!--ForeHelp.Hotspot JUMP="Screen_Object_Methods_Print"--><!--ForeHelp.EndHotspot-->IgnoreEscape</a></p></td>
		<td style="padding-left: 1px; padding-top: 1px; padding-right: 1px; 
			 padding-bottom: 1px;" height="15" width="192"><p class="Base">&#160;&#160;&#160;&#160;<a 
		 href="#Screen_Object_Methods_IgnoreCase"><!--ForeHelp.Hotspot JUMP="Screen_Object_Methods_Print"--><!--ForeHelp.EndHotspot-->IgnoreCase</a></p></td>
	</tr>
	<tr>
		<td style="padding-left: 1px; padding-top: 1px; padding-right: 1px; 
			 padding-bottom: 1px;" height="15" width="192"><p class="Base">&#160;&#160;&#160;&#160;<!--ForeHelp.Hotspot JUMP="Screen_Object_Methods_Print"--><!--ForeHelp.EndHotspot--><a 
		 href="#Screen_Object_Properties_MatchIndex">MatchIndex</a></p></td>
		<td style="padding-left: 1px; padding-top: 1px; padding-right: 1px; 
			 padding-bottom: 1px;" height="15" width="192"><p class="Base">&#160;&#160;&#160;&#160;<a 
		 href="Screen_Object.htm#Screen_Object_Methods_Print">Print</a></p></td>
	</tr>
	<tr>
		<td style="padding-left: 1px; padding-top: 1px; padding-right: 1px; 
			 padding-bottom: 1px;" height="15" width="192"><p class="Base">&#160;&#160;&#160;&#160;<!--ForeHelp.Hotspot JUMP="Screen_Object_Properties_Rows"--><!--ForeHelp.EndHotspot--><a 
		 href="Screen_Object.htm#Screen_Object_Properties_Rows">Rows</a></p></td>
		<td style="padding-left: 1px; padding-top: 1px; padding-right: 1px; 
			 padding-bottom: 1px;" height="15" width="192"><p class="Base">&#160;&#160;&#160;&#160;<!--ForeHelp.Hotspot JUMP="Screen_Object_Methods_Send"--><!--ForeHelp.EndHotspot--><a 
		 href="#ReadString">ReadString</a></p></td>
	</tr>
	<tr>
		<td style="padding-left: 1px; padding-top: 1px; padding-right: 1px; 
			 padding-bottom: 1px;" height="15" width="192"><p class="Base">&#160;&#160;&#160;&#160;<!--ForeHelp.Hotspot JUMP="Screen_Object_Properties_Synchronous"--><!--ForeHelp.EndHotspot--><a 
		 href="#Screen_Object_Properties_Selection">Selection</a></p></td>
		<td style="padding-left: 1px; padding-top: 1px; padding-right: 1px; 
			 padding-bottom: 1px;" height="15" width="192"><p class="Base">&#160;&#160;&#160;&#160;<!--ForeHelp.Hotspot JUMP="Screen_Object_Properties_Synchronous"--><!--ForeHelp.EndHotspot--><a 
		 href="Screen_Object.htm#Screen_Object_Methods_Send">Send</a></p></td>
	</tr>
	<tr>
		<td style="padding-left: 1px; padding-top: 1px; padding-right: 1px; 
			 padding-bottom: 1px;" height="15" width="192"><p class="Base">&#160;&#160;&#160;&#160;<!--ForeHelp.Hotspot JUMP="Screen_Object_Properties_Synchronous"--><!--ForeHelp.EndHotspot--><a 
		 href="Screen_Object.htm#Screen_Object_Properties_Synchronous">Synchronous</a></p></td>
		<td style="padding-left: 1px; padding-top: 1px; padding-right: 1px; 
			 padding-bottom: 1px;" height="15" width="192"><p class="Base">&#160;&#160;&#160;&#160;<!--ForeHelp.Hotspot JUMP="Screen_Object_Methods_SendSpecial"--><!--ForeHelp.EndHotspot--><a 
		 href="#Screen_Object_Methods_SendKeys">SendKeys</a></p></td>
	</tr>
	<tr>
		<td style="padding-left: 1px; padding-top: 1px; padding-right: 1px; 
			 padding-bottom: 1px;" height="15" width="192"><p class="Base">&#160;</p></td>
		<td style="padding-left: 1px; padding-top: 1px; padding-right: 1px; 
			 padding-bottom: 1px;" height="15" width="192"><p class="Base">&#160;&#160;&#160;&#160;<!--ForeHelp.Hotspot JUMP="Screen_Object_Methods_WaitForCursor"--><!--ForeHelp.EndHotspot--><a 
		 href="#Screen_Object_Methods_SendSpecial">SendSpecial</a></p></td>
	</tr>
	<tr>
		<td style="padding-left: 1px; padding-top: 1px; padding-right: 1px; 
			 padding-bottom: 1px;" height="15" width="192"><p class="Base">&#160;</p></td>
		<td style="padding-left: 1px; padding-top: 1px; padding-right: 1px; 
			 padding-bottom: 1px;" height="15" width="192"><p class="Base">&#160;&#160;&#160;&#160;<!--ForeHelp.Hotspot JUMP="Screen_Object_Methods_WaitForKey"--><!--ForeHelp.EndHotspot--><a 
		 href="Screen_Object.htm#Screen_Object_Methods_WaitForCursor">WaitForCursor</a></p></td>
	</tr>
	<tr>
		<td style="padding-left: 1px; padding-top: 1px; padding-right: 1px; 
			 padding-bottom: 1px;" height="15" width="192"><p class="Base">&#160;</p></td>
		<td style="padding-left: 1px; padding-top: 1px; padding-right: 1px; 
			 padding-bottom: 1px;" height="15" width="192"><p class="Base">&#160;&#160;&#160;&#160;<!--ForeHelp.Hotspot JUMP="Screen_Object_Methods_WaitForString"--><!--ForeHelp.EndHotspot--><a 
		 href="Screen_Object.htm#Screen_Object_Methods_WaitForKey">WaitForKey</a></p></td>
	</tr>
	<tr>
		<td style="padding-left: 1px; padding-top: 1px; padding-right: 1px; 
			 padding-bottom: 1px;" height="15" width="192"><p class="Base">&#160;</p></td>
		<td style="padding-left: 1px; padding-top: 1px; padding-right: 1px; 
			 padding-bottom: 1px;" height="15" width="192"><p class="Base">&#160;&#160;&#160;&#160;<!--ForeHelp.Hotspot JUMP="Screen_Object_Methods_WaitForStrings"--><!--ForeHelp.EndHotspot--><a 
		 href="Screen_Object.htm#Screen_Object_Methods_WaitForString">WaitForString</a></p></td>
	</tr>
	<tr>
		<td style="padding-left: 1px; padding-top: 1px; padding-right: 1px; 
			 padding-bottom: 1px;" height="15" width="192"><p class="Base">&#160;</p></td>
		<td style="padding-left: 1px; padding-top: 1px; padding-right: 1px; 
			 padding-bottom: 1px;" height="15" width="192"><p class="Base">&#160;&#160;&#160;&#160;<!--ForeHelp.Hotspot JUMP="Screen_Object_Methods_WaitForStrings"--><!--ForeHelp.EndHotspot--><a 
		 href="Screen_Object.htm#Screen_Object_Methods_WaitForStrings">WaitForStrings</a></p></td>
	</tr>
</table>
<p class="Base">&#160;</p>
<p class="SOH1"><a name="Screen_Object_Properties" id="Screen_Object_Properties"></a>Properties</p>
<p class="SingleSpaced075">&#160;</p>
<p class="SOH2"><a name="Screen_Object_Properties_CurrentColumn" id="Screen_Object_Properties_CurrentColumn"></a>CurrentColumn</p>
<p class="SOH3">Description</p>
<p class="SingleSpaced075">Returns the current column of the cursor.</p>
<p class="SOH3">Remarks</p>
<p class="SingleSpaced075">Read-only numeric property. The first column 
 is 1. An error will be returned if there is no <a href="javascript:TextPopup(this)" id="HotSpot46788" class="glossterm">connection</a><script type="text/javascript" language="JavaScript1.2">//<![CDATA[
TextPopupInit('HotSpot46788', 'POPUP46788');
//]]></script><span class="glosstext" id="POPUP46788" style="display: none;"> A data path or circuit between two computers over a phone line, network cable, or other means.</span> 
 open.</p>
<p class="SOH3">VBScript</p>
<p class="SOH4">Syntax</p>
<p class="Entry100single"><i style="font-style: italic;"><span style="font-style: normal;">[</span> 
 <span style="font-style: italic;"><i>varname</i></span> <span style="font-style: normal;">= 
 ]</span> object</i>.CurrentColumn</p>
<p class="SOH3">Python</p>
<p class="SOH4">Syntax</p>
<p class="Entry100single"><i style="font-style: italic;"><span style="font-style: normal;">[</span> 
 <span style="font-style: italic;"><i>varname</i></span> <span style="font-style: normal;">= 
 ]</span> object</i>.CurrentColumn</p>
<p class="SingleSpaced075">&#160;</p>
<p class="SOH2"><a name="Screen_Object_Properties_CurrentRow" id="Screen_Object_Properties_CurrentRow"></a>CurrentRow</p>
<p class="SOH3">Description</p>
<p class="SingleSpaced075">Returns the current row of the cursor.</p>
<p class="SOH3">Remarks</p>
<p class="SingleSpaced075">Read-only numeric property. The first row is 
 1. An error will be returned if there is no connection open.</p>
<p class="SOH3">VBScript</p>
<p class="SOH4">Syntax</p>
<p class="Entry100single"><i style="font-style: italic;"><span style="font-style: normal;">[</span> 
 <span style="font-style: italic;"><i>varname</i></span> <span style="font-style: normal;">= 
 ]</span></i> <i>object</i>.CurrentRow</p>
<p class="SOH3">Python</p>
<p class="SOH4">Syntax</p>
<p class="Entry100single"><i style="font-style: italic;"><span style="font-style: normal;">[</span> 
 <span style="font-style: italic;"><i>varname</i></span> <span style="font-style: normal;">= 
 ]</span></i> <span style="font-style: italic;"><i><i>object</i></i></span>.CurrentRow</p>
<p class="SingleSpaced075">&#160;</p>
<p class="SOH2"><a name="Screen_Object_Properties_Columns" id="Screen_Object_Properties_Columns"></a>Columns</p>
<p class="SOH3">Description</p>
<p class="SingleSpaced075">Returns the current number of columns.</p>
<p class="SOH3">Remarks</p>
<p class="SingleSpaced075">Read-only numeric property.</p>
<p class="SOH3">VBScript</p>
<p class="SOH4">Syntax</p>
<p class="Entry100single"><i style="font-style: italic;"><span style="font-style: normal;">[</span> 
 <span style="font-style: italic;"><i>varname</i></span> <span style="font-style: normal;">= 
 ]</span></i> <i>object</i>.Columns</p>
<p class="SOH3">Python</p>
<p class="SOH4">Syntax</p>
<p class="Entry100single"><i style="font-style: italic;"><span style="font-style: normal;">[</span> 
 <span style="font-style: italic;"><i>varname</i></span> <span style="font-style: normal;">= 
 ]</span> object</i>.Columns</p>
<p class="SingleSpaced075">&#160;</p>
<p class="SOH2"><a name="Screen_Object_Properties_IgnoreEscape" id="Screen_Object_Properties_IgnoreEscape"></a>IgnoreEscape</p>
<p class="SOH3">Description</p>
<p class="SingleSpaced075">Allows the script to control whether escape 
 sequences are ignored or not for WaitForString(s) and ReadString methods.</p>
<p class="SOH3">Remarks</p>
<p class="SingleSpaced075">The IgnoreEscape property toggles whether ReadString() 
 or WaitForString() recognizes escape sequences. By default, Readstring 
 will capture and look for escape sequences.</p>
<p class="SOH3">VBScript</p>
<p class="SOH4">Syntax</p>
<p class="Entry100single"><i style="font-style: italic;">object</i>.IgnoreEscape 
 [ = True | False ]</p>
<p class="SOH4">Example</p>
<p class="Entry100single"><span class="Entry">crt.screen.IgnoreEscape = 
 False</span></p>
<p class="Entry100single"><span class="Entry">' The following call will 
 return after we receive either an</span></p>
<p class="Entry100single"><span class="Entry">' 'Escape' or 'BEL' character 
 from the remote</span></p>
<p class="Entry100single"><span class="Entry">MsgBox crt.screen.Readstring(chr(27), 
 chr(7))</span></p>
<p class="Entry100single"><span class="Entry">crt.screen.IgnoreEscape = 
 True</span></p>
<p class="Entry100single"><span class="Entry">' Now that IgnoreEscape is 
 set to true, the following call</span></p>
<p class="Entry100single"><span class="Entry">' will always time out after 
 5 seconds because ReadString is</span></p>
<p class="Entry100single"><span class="Entry">' ignoring non-printable 
 characters</span></p>
<p class="Entry100single"><span class="Entry">MsgBox crt.screen.Readstring(chr(27), 
 chr(7), 5)</span></p>
<p class="SOH3">Python</p>
<p class="SOH4">Syntax</p>
<p class="Entry100single"><i style="font-style: italic;">object</i>.IgnoreEscape 
 [ = True | False ]</p>
<p class="SOH4">Example</p>
<p class="Entry100single">crt.Screen.IgnoreEscape = False</p>
<p class="Entry100single"># The following call will return after we receive 
 either an</p>
<p class="Entry100single"># 'Escape' or 'BEL' character from the remote</p>
<p class="Entry100single">crt.Dialog.MessageBox(crt.Screen.ReadString([chr(27), 
 chr(7)]))</p>
<p class="Entry100single">crt.Screen.IgnoreEscape = True</p>
<p class="Entry100single"># Now that IgnoreEscape is set to true, the following 
 call</p>
<p class="Entry100single"># will always time out after 5 seconds because 
 ReadString is</p>
<p class="Entry100single"># ignoring non-printable characters</p>
<p class="Entry100single">crt.Dialog.MessageBox(crt.Screen.ReadString([chr(27), 
 chr(7)], 5))</p>
<p class="SingleSpaced075">&#160;</p>
<p class="SOH2"><a name="Screen_Object_Properties_MatchIndex" id="Screen_Object_Properties_MatchIndex"></a>MatchIndex</p>
<p class="SOH3">Description</p>
<p class="SingleSpaced075">Determines which index within your list of strings 
 was found by the ReadString or WaitForStrings method.</p>
<p class="SOH3">Remarks</p>
<p class="SingleSpaced075">Is only useful in combination with either the 
 ReadString or WaitForStrings method.</p>
<p class="SingleSpaced075">The crt.Screen.MatchIndex property is used in 
 conjunction with the ReadString method when ReadString is passed multiple 
 strings to wait for. When used, MatchIndex will indicate which string 
 was found by ReadString (1=first_string, 2=second_string, etc.). A MatchIndex 
 value of 0 indicates that a timeout occurred before a match was found.</p>
<p class="SOH3">VBScript</p>
<p class="SOH4">Syntax</p>
<p class="Entry100single"><i style="font-style: italic;"><span style="font-style: normal;">[</span> 
 <span style="font-style: italic;"><i>varname</i></span> <span style="font-style: normal;">= 
 ]</span></i> <i>object</i>.MatchIndex</p>
<p class="SOH4">Example</p>
<p class="Entry100single"><span class="Entry">szOutput = crt.Screen.ReadString(&quot;error&quot;, 
 &quot;warning&quot;, &quot;#&quot;, 10)</span></p>
<p class="Entry100single"><span class="Entry">Select Case crt.Screen.MatchIndex</span></p>
<p class="Entry100single"><span class="Entry">Case 0</span></p>
<p class="Entry100single"><span class="Entry">MsgBox &quot;Timed out!&quot;</span></p>
<p class="Entry100single"><span class="Entry">Case 1</span></p>
<p class="Entry100single"><span class="Entry">MsgBox &quot;Found 'error'&quot;</span></p>
<p class="Entry100single"><span class="Entry">Case 2</span></p>
<p class="Entry100single"><span class="Entry">MsgBox &quot;Found 'warning'&quot;</span></p>
<p class="Entry100single"><span class="Entry">Case 3</span></p>
<p class="Entry100single"><span class="Entry">MsgBox &quot;Found '#'&quot;</span></p>
<p class="Entry100single"><span class="Entry">End Select</span></p>
<p class="SOH3">Python</p>
<p class="SOH4">Syntax</p>
<p class="Entry100single"><i style="font-style: italic;"><span style="font-style: normal;">[</span> 
 <span style="font-style: italic;"><i>varname</i></span> <span style="font-style: normal;">= 
 ]</span></i> <i>object</i>.MatchIndex</p>
<p class="SOH4">Example</p>
<p class="Entry100single">szOutput = crt.Screen.ReadString([&quot;error&quot;, 
 &quot;warning&quot;, &quot;#&quot;], 10)</p>
<p class="Entry100single">index = crt.Screen.MatchIndex</p>
<p class="Entry100single">if (index == 0):</p>
<p class="Entry100single">&#160;&#160;&#160;crt.Dialog.MessageBox(&quot;Timed 
 out!&quot;)</p>
<p class="Entry100single">elif (index == 1):</p>
<p class="Entry100single">&#160;&#160;&#160;crt.Dialog.MessageBox(&quot;Found 
 'error'&quot;)</p>
<p class="Entry100single">elif (index == 2):</p>
<p class="Entry100single">&#160;&#160;&#160;crt.Dialog.MessageBox(&quot;Found 
 'warning'&quot;)</p>
<p class="Entry100single">elif (index == 3):</p>
<p class="Entry100single">&#160;&#160;&#160;crt.Dialog.MessageBox(&quot;Found 
 '#'&quot;)</p>
<p class="SingleSpaced075">&#160;</p>
<p class="SOH2"><a name="Screen_Object_Properties_Rows" id="Screen_Object_Properties_Rows"></a>Rows</p>
<p class="SOH3">Description</p>
<p class="SingleSpaced075">Returns the current number of rows.</p>
<p class="SOH3">Remarks</p>
<p class="SingleSpaced075">Read-only numeric property.</p>
<p class="SOH3">VBScript</p>
<p class="SOH4">Syntax</p>
<p class="Entry100single"><i style="font-style: italic;"><span style="font-style: normal;">[</span> 
 <span style="font-style: italic;"><i>varname</i></span> <span style="font-style: normal;">= 
 ]</span></i> <i>object</i>.Rows</p>
<p class="SOH3">Python</p>
<p class="SOH4">Syntax</p>
<p class="Entry100single"><i style="font-style: italic;"><span style="font-style: normal;">[</span> 
 <span style="font-style: italic;"><i>varname</i></span> <span style="font-style: normal;">= 
 ]</span></i> <i>object</i>.Rows</p>
<p class="SingleSpaced075">&#160;</p>
<p class="SOH2"><a name="Screen_Object_Properties_Selection" id="Screen_Object_Properties_Selection"></a>Selection</p>
<p class="SOH3">Description</p>
<p class="SingleSpaced075">Returns the current selection.</p>
<p class="SOH3">VBScript</p>
<p class="SOH4">Syntax</p>
<p class="Entry100single"><i style="font-style: italic;"><span style="font-style: normal;">[</span> 
 <span style="font-style: italic;"><i>varname</i></span> <span style="font-style: normal;">= 
 ]</span></i> <i>object</i>.Selection</p>
<p class="SOH4">Example</p>
<p class="Entry100single"><span style="font-family: 'Courier New', sans-serif;"># 
 $language = &quot;VBScript&quot;</span></p>
<p class="Entry100single"># $interface = &quot;1.0&quot;</p>
<p class="Entry100single">' GoogleSelectedText.vbs</p>
<p class="Entry100single">' send the selected text to the clipboard</p>
<p class="Entry100single">crt.Clipboard.Text = crt.Screen.Selection</p>
<p class="Entry100single">' Extract the selected text from the clipboard 
 into a variable as &quot;Text&quot;</p>
<p class="Entry100single">szSelection = crt.Clipboard.Text</p>
<p class="Entry100single">' Now search on Google for the information.</p>
<p class="Entry100single">g_szSearchBase = &quot;https://www.google.com/search?hl=en&amp;q=&quot;</p>
<p class="Entry100single">Set g_shell = CreateObject(&quot;WScript.Shell&quot;)</p>
<p class="Entry100single">g_shell.Run &quot;iexplore &quot; &amp; g_szSearchBase 
 &amp; szSelection</p>
<p class="SOH3">Python</p>
<p class="SOH4">Syntax</p>
<p class="Entry100single"><i style="font-style: italic;"><span style="font-style: normal;">[</span> 
 <span style="font-style: italic;"><i>varname</i></span> <span style="font-style: normal;">= 
 ]</span></i> <i>object</i>.Selection</p>
<p class="SOH4">Example</p>
<p class="Entry100single">#$language = &quot;Python&quot;</p>
<p class="Entry100single">#$interface = &quot;1.0&quot;</p>
<p class="Entry100single">&#160;</p>
<p class="Entry100single">import SecureCRT</p>
<p class="Entry100single">import webbrowser</p>
<p class="Entry100single">&#160;</p>
<p class="Entry100single"># send the selected text to the clipboard</p>
<p class="Entry100single">crt.Clipboard.Text = crt.Screen.Selection</p>
<p class="Entry100single"># Extract the selected text from the clipboard 
 into a variable as &quot;Text&quot;</p>
<p class="Entry100single">szSelection = crt.Clipboard.Text</p>
<p class="Entry100single"># Now search on Google for the information.</p>
<p class="Entry100single">g_szURL = &quot;https://www.google.com/search?q=&quot; 
 + szSelection</p>
<p class="Entry100single">webbrowser.open(g_szURL)</p>
<p class="SingleSpaced075">&#160;</p>
<p class="SOH2"><a name="Screen_Object_Properties_Synchronous" id="Screen_Object_Properties_Synchronous"></a>Synchronous</p>
<p class="SOH3">Description</p>
<p class="SingleSpaced075">Returns or sets the Synchronous setting of the 
 screen.</p>
<p class="SOH3">Remarks</p>
<p class="SingleSpaced075">If Synchronous is False then under certain circumstances 
 a script can miss data sent by the <a href="javascript:TextPopup(this)" id="HotSpot30499" class="glossterm">server</a><script type="text/javascript" language="JavaScript1.2">//<![CDATA[
TextPopupInit('HotSpot30499', 'POPUP30499');
//]]></script><span class="glosstext" id="POPUP30499" style="display: none;"> A computer program that provides services to other computer programs (called clients).  Often the computer on which a server program runs is also called a server.  The term host is often used as a synonym for server.</span> 
 that it is expecting to see. Synchronous is set to False by default.</p>
<p class="SOH3">VBScript</p>
<p class="SOH4">Syntax</p>
<p class="Entry100single"><i style="font-style: italic;">object</i>.Synchronous 
 [ = True | False ]</p>
<p class="SOH4">Example</p>
<p class="SingleSpaced075">The following code that waits for two different 
 strings, could potentially miss the second string while it is performing 
 some operation after receiving the first string. In order to prevent this 
 kind of condition, it temporarily sets Synchronous to True:</p>
<p class="Entry100single"><nobr style="white-space: nowrap;">...</nobr></p>
<p class="Entry100single"><nobr style="white-space: nowrap;">crt.screen.Synchronous 
 = True</nobr></p>
<p class="Entry100single"><nobr style="white-space: nowrap;"><span style="font-family: 'Courier New', sans-serif;">crt.screen.Send(&quot;someCommand&quot;)</span></nobr></p>
<p class="Entry100single"><nobr style="white-space: nowrap;"><span style="font-family: 'Courier New', sans-serif;">crt.screen.WaitForString(&quot;thisString&quot;)</span></nobr></p>
<p class="Entry100single"><nobr style="white-space: nowrap;"><span style="font-family: 'Courier New', sans-serif;">...</span> 
 <i>do something else</i></nobr></p>
<p class="Entry100single"><nobr style="white-space: nowrap;">crt.screen.WaitForString(&quot;thatString&quot;)</nobr></p>
<p class="SOH3"><nobr style="white-space: nowrap;">P</nobr>ython</p>
<p class="SOH4">Syntax</p>
<p class="Entry100single"><i style="font-style: italic;">object</i>.Synchronous 
 [ = True | False ]</p>
<p class="SOH4">Example</p>
<p class="SingleSpaced075">The following code that waits for two different 
 strings, could potentially miss the second string while it is performing 
 some operation after receiving the first string. In order to prevent this 
 kind of condition, it temporarily sets Synchronous to True:</p>
<p class="Entry100single"><nobr style="white-space: nowrap;">...</nobr></p>
<p class="Entry100single"><nobr style="white-space: nowrap;">c</nobr>rt.Screen.Synchronous 
 = True</p>
<p class="Entry100single">crt.Screen.Send(&quot;someCommand&quot;)</p>
<p class="Entry100single">crt.Screen.WaitForString(&quot;thisString&quot;)</p>
<p class="Entry100single">... do something else</p>
<p class="Entry100single">crt.Screen.WaitForString(&quot;thatString&quot;)</p>
<p class="SingleSpaced075">&#160;</p>
<p class="SingleSpaced075">&#160;</p>
<p class="SOH1"><span style="font-family: 'Courier New', sans-serif;"><a 
	 name="Screen_Object_Methods" id="Screen_Object_Methods"></a></span>Methods</p>
<p class="SingleSpaced075">&#160;</p>
<p class="SOH2"><a name="Screen_Object_Methods_Clear" id="Screen_Object_Methods_Clear"></a>Clear</p>
<p class="SOH3">Description</p>
<p class="SingleSpaced075">Clears the screen.</p>
<p class="SOH3">Remarks</p>
<p class="SingleSpaced075">None.</p>
<p class="SOH3">VBScript</p>
<p class="SOH4">Syntax</p>
<p class="Entry100single"><i style="font-style: italic;">object</i>.Clear</p>
<p class="SOH3">Python</p>
<p class="SOH4">Syntax</p>
<p class="Entry100single"><i style="font-style: italic;">object</i>.Clear()</p>
<p class="SingleSpaced075">&#160;</p>
<p class="SOH2"><a name="Screen_Object_Methods_Get1" id="Screen_Object_Methods_Get1"></a>Get</p>
<p class="SOH3">Description</p>
<p class="SingleSpaced075">Returns a string of characters read for a portion 
 of the screen.</p>
<p class="SOH3">Remarks</p>
<p class="SingleSpaced075">Returns a string containing the characters on 
 the screen rectangle defined by the numeric values row1,col1 (upper-left) 
 and row2,col2 (lower-right).</p>
<p class="SOH3">VBScript</p>
<p class="SOH4">Syntax</p>
<p class="Entry100single"><i style="font-style: italic;">object</i>.Get(<span 
	 style="font-style: italic;"><i>row1</i></span>, <span style="font-style: italic;"><i>col1</i></span>, 
 <span style="font-style: italic;"><i>row2</i></span>, <span style="font-style: italic;"><i>col2</i></span>)</p>
<p class="SOH3">Python</p>
<p class="SOH4">Syntax</p>
<p class="Entry100single"><i style="font-style: italic;">object</i>.Get(<span 
	 style="font-style: italic;"><i>row1</i></span>, <span style="font-style: italic;"><i>col1</i></span>, 
 <span style="font-style: italic;"><i>row2</i></span>, <span style="font-style: italic;"><i>col2</i></span>)</p>
<p class="SingleSpaced075">&#160;</p>
<p class="SOH2"><a name="Get2" id="Get2"></a>Get2</p>
<p class="SOH3">Description</p>
<p class="SingleSpaced075">Returns the characters on each row requested.</p>
<p class="SOH3">Remarks</p>

<p class="SingleSpaced075">Returns 
 the characters on each row requested with a \n, so the rows can be split 
 by looking for \n. This allows the rows to be different lengths as required 
 by the contents of the rows.</p>

<p class="SOH3">Notes</p>
<p class="SingleSpaced075">If your scripts need to work with MBCS languages, 
 you should use the Get2 interface.</p>
<p class="SOH3">VBScript</p>
<p class="SOH4">Syntax</p>
<p class="Entry100single"><i style="font-style: italic;">object</i>.Get2(<span 
	 style="font-style: italic;"><i>row1</i></span>, <span style="font-style: italic;"><i>col1</i></span>, 
 <span style="font-style: italic;"><i>row2</i></span>, <span style="font-style: italic;"><i>col2</i></span>)</p>
<p class="SOH3">Python</p>
<p class="SOH4">Syntax</p>
<p class="Entry100single"><i style="font-style: italic;">object</i>.Get2(<span 
	 style="font-style: italic;"><i>row1</i></span>, <span style="font-style: italic;"><i>col1</i></span>, 
 <span style="font-style: italic;"><i>row2</i></span>, <span style="font-style: italic;"><i>col2</i></span>)</p>
<p class="SingleSpaced075">&#160;</p>
<p class="SOH2"><a name="Screen_Object_Methods_IgnoreCase" id="Screen_Object_Methods_IgnoreCase"></a>IgnoreCase</p>
<p class="SOH3">Description</p>
<p class="SingleSpaced075">Provides a global method to set case insensitivity. 
 In addition, case insensitivity can be set per-function as described below 
 in the WaitForStrings, WaitForString, and ReadString methods.</p>
<p class="SOH3">Remarks</p>
<p class="SingleSpaced075">If this method is true, the WaitForStrings, 
 WaitForString, and ReadString methods are <span style="text-decoration: underline; "><u>not</u></span> 
 case sensitive, otherwise, they <span style="text-decoration: underline; "><u>are</u></span> 
 case sensitive (default).</p>
<p class="SOH3">VBScript</p>
<p class="SOH4">Syntax</p>
<p class="Entry100single"><i style="font-style: italic;">object</i>.IgnoreCase</p>
<p class="SOH3">Python</p>
<p class="SOH4">Syntax</p>
<p class="Entry100single"><i style="font-style: italic;">object</i>.IgnoreCase()</p>
<p class="SingleSpaced075">&#160;</p>
<p class="SOH2"><a name="Screen_Object_Methods_Print" id="Screen_Object_Methods_Print"></a>Print</p>
<p class="SOH3">Description</p>
<p class="SingleSpaced075">Prints the screen.</p>
<p class="SOH3">Remarks</p>
<p class="SingleSpaced075">If no printer is defined on your machine, an 
 error will be returned.</p>
<p class="SOH3">VBScript</p>
<p class="SOH4">Syntax</p>
<p class="Entry100single"><i style="font-style: italic;">object</i>.Print</p>
<p class="SOH3">Python</p>
<p class="SOH4">Syntax</p>
<p class="Entry100single"><i style="font-style: italic;">object</i>.Print()</p>
<p class="SingleSpaced075">&#160;</p>
<p class="SingleSpaced075">&#160;</p>
<p class="SOH2"><a name="ReadString" id="ReadString"></a>ReadString</p>
<p class="SOH3">Description</p>
<p class="SingleSpaced075">Captures data as it is received from the remote.</p>
<p class="SOH3">Remarks</p>
<p class="SingleSpaced075">ReadString is similar to the WaitForStrings 
 function except in that ReadString captures data. By default, ReadString 
 will capture all data received from the remote, including escape sequences. 
 To enable or disable the inclusion of escape sequences in the data captured 
 by ReadString, set the Screen.IgnoreEscape property to false/true, respectively. 
 If the remote side is sending escape sequences and Screen.IgnoreEscape 
 is set to true, ReadString will return the string &quot;plug&quot; when 
 &quot;p&quot; was drawn in the upper left corner, &quot;l&quot; in the 
 upper right corner, &quot;u&quot; in the bottom left corner, and &quot;g&quot; 
 in the bottom right corner.</p>
<p class="SingleSpaced075">If a timeout parameter is provided, and ReadString 
 reaches the timeout period without receiving the specified string(s) from 
 the remote, ReadString will return an empty string.</p>
<p class="SOH3">Notes</p>
<p class="SingleSpaced075">This method takes an optional bCaseInsensitive 
 parameter that defaults to false (case-sensitive wait string matching). 
 It also takes an optional lWaitTimeout parameter, which defaults to &quot;0&quot; 
 if not specified. To specify the bCaseInsensitive parameter, you must 
 also explicitly specify the lWaitTimeout parameter when using this function 
 in a script.</p>
<p class="SingleSpaced075">To retrieve a 1-based index of which string 
 ReadString encountered, check the Screen.MatchIndex property.</p>
<p class="SOH3">VBScript</p>
<p class="SOH4">Syntax</p>
<p class="Entry100single"><i style="font-style: italic;"><span style="font-style: normal;">[</span> 
 <span style="font-style: italic;"><i>varname</i></span> <span style="font-style: normal;">= 
 ]</span></i> <span style="font-style: normal;"><i>o</i></span><i>bject</i>.ReadString([<span 
	 style="font-style: italic;"><i>string1</i></span>[,<span style="font-style: italic;"><i>string2</i></span> 
 ... , <span style="font-style: italic;"><i>stringn</i></span>]] [, <span style="font-style: italic;"><i>timeoutSeconds</i></span>] 
 [<span style="font-style: italic;"><i>bCaseInsensitive</i></span>])</p>
<p class="SOH4">Example</p>
<p class="SingleSpaced075">ReadString has the following three usage scenarios:</p>
<p class="SingleSpaced075" style="margin-left: 96px; text-indent: -24px;">1. 
 &#160;&#160;Returns data as soon as it is available from the remote, one 
 character at a time. The syntax for this scenario is:</p>
<p class="Entry125single">varname = crt.Screen.ReadString</p>
<p class="SingleSpaced075" style="margin-left: 96px;">Example:</p>
<p class="Entry125single">char = crt.Screen.ReadString</p>
<p class="SingleSpaced075" style="margin-left: 96px; text-indent: -24px;">2. 
 &#160;&#160;Capture data until a specific string is detected from the 
 remote (similar to how WaitForStrings() is used, except that it captures 
 data). The syntax for this scenario is:</p>
<p class="Entry125single">varname = crt.Screen.ReadString(StringToWaitFor 
 [, TimeOutSeconds])</p>
<p class="SingleSpaced075" style="margin-left: 96px;">Example:</p>
<p class="Entry125single">str = crt.Screen.ReadString(&quot;home&quot;, 
 10)</p>
<p class="SingleSpaced075">&#160;</p>
<p class="SingleSpaced075" style="margin-left: 96px; text-indent: -24px;">3. 
 &#160;&#160;Capture data until one of a list of multiple strings is detected 
 from the remote (similar to how WaitForStrings is used, except that it 
 captures data). The syntax for this scenario is:</p>
<p class="Entry125single">varname = crt.Screen.ReadString(StringToWaitFor 
 [, StringToWaitFor [, ...]] [, TimeOutSeconds])</p>
<p class="SingleSpaced075" style="margin-left: 96px;">or</p>
<p class="Entry125single">varname = crt.Screen.ReadString(StringsArray 
 [, TimeOutSeconds])</p>
<p class="SingleSpaced075" style="margin-left: 96px;">Examples:</p>
<p class="Entry125single">str = crt.Screen.ReadString(&quot;home&quot;, 
 &quot;work&quot;, ... , 10)</p>
<p class="SingleSpaced075" style="margin-left: 96px;">or</p>
<p class="Entry125single">str = crt.Screen.ReadString(arrayOfStrings, 10)</p>
<p class="SOH3">Python</p>
<p class="SOH4">Syntax</p>
<p class="Entry100single"><i style="font-style: italic;"><span style="font-style: normal;">[</span> 
 <span style="font-style: italic;"><i>varname</i></span> <span style="font-style: normal;">= 
 ]</span></i> <span style="font-style: normal;"><i>o</i></span><i>bject</i>.ReadString([<span 
	 style="font-style: italic;"><i>stringarray</i></span>] [, <span style="font-style: italic;"><i>timeoutSeconds</i></span>] 
 [, <span style="font-style: italic;"><i>bcaseInsensitive</i></span>])</p>
<p class="SOH4">Example</p>
<p class="SingleSpaced075">ReadString has the following three usage scenarios:</p>
<p class="SingleSpaced075" style="margin-left: 96px; text-indent: -24px;">1. 
 &#160;&#160;Returns data as soon as it is available from the remote, one 
 character at a time. The syntax for this scenario is:</p>
<p class="Entry125single">varname = crt.Screen.ReadString()</p>
<p class="SingleSpaced075" style="margin-left: 96px;">Example:</p>
<p class="Entry125single">char = crt.Screen.ReadString()</p>
<p class="SingleSpaced075" style="margin-left: 96px; text-indent: -24px;">2. 
 &#160;&#160;Capture data until a specific string is detected from the 
 remote (similar to how WaitForStrings() is used, except that it captures 
 data). The syntax for this scenario is:</p>
<p class="Entry125single">varname = crt.Screen.ReadString(StringToWaitFor 
 [, TimeOutSeconds])</p>
<p class="SingleSpaced075" style="margin-left: 96px;">Example:</p>
<p class="Entry125single">str = crt.Screen.ReadString(&quot;home&quot;, 
 10)</p>
<p class="SingleSpaced075" style="margin-left: 96px; text-indent: -24px;">3. 
 &#160;&#160;Capture data until one of a list of multiple strings is detected 
 from the remote (similar to how WaitForStrings is used, except that it 
 captures data). The syntax for this scenario is:</p>
<p class="Entry125single">varname = crt.Screen.ReadString(StringsArray 
 [, TimeOutSeconds])</p>
<p class="SingleSpaced075" style="margin-left: 96px;">Example:</p>
<p class="Entry125single">str = crt.Screen.ReadString([&quot;home&quot;, 
 &quot;work&quot;], 10)</p>
<p class="SingleSpaced075">&#160;</p>
<p class="SOH2"><a name="Screen_Object_Methods_Send" id="Screen_Object_Methods_Send"></a>Send</p>
<p class="SOH3">Description</p>
<p class="SingleSpaced075">Sends a string of characters.</p>
<p class="SOH3">Remarks</p>
<p class="SingleSpaced075">Attempting to send a string while no connection 
 is open returns an error. For sessions using TN3270 emulation, do not 
 append vbCr to the end of a string. To send a carriage return, call Screen.SendSpecial 
 with &quot;<span class="Entry">TN3270_RETURN</span>&quot;.</p>
<p class="SOH3">Notes</p>
<p class="SingleSpaced075">The Send interface works with MBCS languages, 
 and works correctly regardless of whether the display font can represent 
 the characters or not, as long as the select &quot;Character Encoding&quot; 
 for the session can represent the characters. This method takes an optional 
 bSendToScreenOnly parameter that defaults to false. If it is set to true, 
 the text will be sent only to the screen and not to the remote system. 
 &#160;The text will also be logged if the session is logging to a file.</p>
<p class="SOH3">VBScript</p>
<p class="SOH4">Syntax</p>
<p class="Entry100single"><i style="font-style: italic;">object</i>.Send 
 <i>string</i> [, bSendToScreenOnly]</p>
<p class="SOH3"><i style="font-style: italic;">P</i>ython</p>
<p class="SOH4">Syntax</p>
<p class="Entry100single"><i style="font-style: italic;">object</i>.Send(<i>string</i> 
 [, bSendToScreenOnly])</p>
<p class="SingleSpaced075">&#160;</p>
<p class="SOH2"><a name="Screen_Object_Methods_SendKeys" id="Screen_Object_Methods_SendKeys"></a>SendKeys</p>
<p class="SOH3">Description</p>
<p class="SingleSpaced075">Sends key strokes to the active window. &#160;</p>
<p class="SOH3">Remarks</p>
<p class="SingleSpaced075">The SendKeys method can send more than one keystroke 
 at a time by using compound string arguments. For example, to send the 
 keystrokes a, b, and c, you would send the string argument &quot;<span 
	 class="Entry">abc</span>&quot;. The SendKeys method also uses some 
 characters as modifiers of characters. This set of special characters 
 consists of the plus sign (<span class="Entry">+</span>), caret (<span 
	 class="Entry">^</span>), percent sign (<span class="Entry">%</span>), 
 tilde (<span class="Entry">~</span>), parentheses, brackets, and braces. 
 The characters &quot;<span class="Entry">+</span>&quot;, &quot;<span class="Entry">^</span>&quot;, 
 and &quot;<span class="Entry">%</span>&quot; perform the functions of 
 <span class="Entry">SHIFT</span>, <span class="Entry">CTRL</span>, and 
 <span class="Entry">ALT</span>, respectively. These can be combined to 
 affect one key as in &quot;<span class="Entry">^%c</span>&quot; which 
 is the equivalent of the <span class="Entry">CTRL+ALT+C</span> key combination. 
 Parenthesis characters are used to group characters for modifiers, for 
 example, &quot;<span class="Entry">+(ec)</span>&quot; will send &quot;<span 
	 class="Entry">EC</span>&quot;. SendKeys can use up to three nested 
 parenthesis.</p>
<p class="SingleSpaced075">&#160;</p>
<p class="SingleSpaced075">To send bracket characters, send the string 
 argument &quot;{[}&quot; for the left bracket and &quot;{]}&quot; for 
 the right one. To send brace characters, send the string argument &quot;{{}&quot; 
 for the left brace and &quot;{}}&quot; for the right one.</p>
<p class="SingleSpaced075">&#160;</p>
<p class="SingleSpaced075">Some keystrokes do not generate characters (such 
 as <span class="Entry">ENTER</span> and <span class="Entry">TAB</span>). 
 Some keystrokes represent actions (such as <span class="Entry">BACKSPACE</span> 
 and <span class="Entry">BREAK</span>). To send these kinds of keystrokes, 
 send the arguments shown in the <a href="SendKeys_Keystroke_Table.htm">SendKeys 
 keystroke table</a>.</p>
<p class="SOH3">VBScript</p>
<p class="SOH4">Syntax</p>
<p class="Entry100single"><i style="font-style: italic;">object</i>.SendKeys 
 <i>string</i></p>
<p class="SOH4">Example</p>
<p class="Entry100single"><span class="Entry">#$language = &quot;VBScript&quot;</span></p>
<p class="Entry100single"><span class="Entry">#$interface = &quot;1.0&quot;</span></p>
<p class="Entry100single"><span class="Entry">Sub Main()</span></p>
<p class="Entry100single"><span class="Entry">crt.Screen.Clear</span></p>
<p class="Entry100single"><span class="Entry">&#160;&#160;&#160;&#160;crt.screen.sendkeys(&quot;mc~&quot;)</span></p>
<p class="Entry100single"><span class="Entry">&#160;&#160;&#160;&#160;crt.Sleep 
 2000</span></p>
<p class="Entry100single"><span class="Entry">&#160;&#160;&#160;&#160;crt.screen.sendkeys(&quot;{f1}&quot;)</span></p>
<p class="Entry100single"><span class="Entry">&#160;&#160;&#160;&#160;crt.Sleep 
 2000</span></p>
<p class="Entry100single"><span class="Entry">&#160;&#160;&#160;&#160;crt.screen.sendkeys(&quot;{esc}0&quot;)</span></p>
<p class="Entry100single"><span class="Entry">&#160;&#160;&#160;&#160;crt.Sleep 
 2000</span></p>
<p class="Entry100single"><span class="Entry">&#160;&#160;&#160;&#160;crt.screen.sendkeys(&quot;{esc}0&quot;)</span></p>
<p class="Entry100single"><span class="Entry">&#160;&#160;&#160;&#160;crt.Sleep 
 2000</span></p>
<p class="Entry100single"><span class="Entry">&#160;&#160;&#160;&#160;crt.screen.sendkeys(&quot;y&quot;)</span></p>
<p class="Entry100single"><span class="Entry">End Sub</span></p>
<p class="SOH3">Python</p>
<p class="SOH4">Syntax</p>
<p class="Entry100single">SendKeys is not currently supported for Python.</p>
<p class="SingleSpaced075">&#160;</p>
<p class="SOH2"><a name="Screen_Object_Methods_SendSpecial" id="Screen_Object_Methods_SendSpecial"></a>SendSpecial</p>
<p class="SOH3">Description</p>
<p class="SingleSpaced075">Sends a built-in <span>Secure</span>CRT command. 
 SendSpecial can send any of the Menu, <a href="javascript:TextPopup(this)" id="HotSpot36663" class="glossterm">Telnet</a><script type="text/javascript" language="JavaScript1.2">//<![CDATA[
TextPopupInit('HotSpot36663', 'POPUP36663');
//]]></script><span class="glosstext" id="POPUP36663" style="display: none;"> Telnet is a protocol that provides an interface for communications between clients and servers.</span>, 
 and VT functions listed on the <!--ForeHelp.Hotspot JUMP="Map_Selected_Key_Dialog"--><!--ForeHelp.EndHotspot--><a 
	 href="Map_Selected_Key_Dialog.htm"><span class="Dialog">Map Selected 
 Key</span></a> dialog (accessed by selecting a key in the <!--ForeHelp.Hotspot JUMP="Keymap_Editor_Dialog"--><!--ForeHelp.EndHotspot--><span class="Dialog">Keymap Editor</span> 
 and clicking on the <strong>Map Selected Key...</strong> button).</p>
<p class="SOH3">Remarks</p>
<p class="SingleSpaced075">The string parameter to SendSpecial should describe 
 one of the special SecureCRT or protocol functions. Attempting to use 
 SendSpecial while no connection is opened will result in an error. For 
 sessions using TN3270 emulation, to send a carriage return, call Screen.SendSpecial 
 with &quot;<span class="Entry">TN3270_RETURN</span>&quot;. To send a Transmit, 
 call Screen.SendSpecial with &quot;<span class="Entry">TN3270_ENTER</span>&quot;.</p>
<p class="SOH3">VBScript</p>
<p class="SOH4">Syntax</p>
<p class="Entry100single"><i style="font-style: italic;">object</i>.SendSpecial 
 <i>string</i></p>
<p class="SOH4">Example</p>
<p class="Entry100single"><nobr style="white-space: nowrap;">screen.SendSpecial 
 &quot;MENU_PASTE&quot;</nobr></p>
<p class="Entry100single"><nobr style="white-space: nowrap;">screen.SendSpecial 
 &quot;TN_BREAK&quot;</nobr></p>
<p class="Entry100single"><nobr style="white-space: nowrap;">screen.SendSpecial 
 &quot;VT_PF1&quot;</nobr></p>
<p class="SOH3">Python</p>
<p class="SOH4">Syntax</p>
<p class="Entry100single"><i style="font-style: italic;">object</i>.SendSpecial(<i>string<span 
	 style="font-style: normal;">)</span></i></p>
<p class="SOH4">Example</p>
<p class="Entry100single">crt.Screen.SendSpecial(&quot;MENU_PASTE&quot;)</p>
<p class="Entry100single">crt.Screen.SendSpecial(&quot;TN_BREAK&quot;)</p>
<p class="Entry100single">crt.Screen.SendSpecial(&quot;VT_PF1&quot;)</p>
<p class="SingleSpaced075">&#160;</p>
<p class="SOH2"><span style="font-family: 'Courier New', sans-serif;"><a 
	 name="Screen_Object_Methods_WaitForCursor" id="Screen_Object_Methods_WaitForCursor"></a></span>WaitForCursor</p>
<p class="SOH3">Description</p>
<p class="SingleSpaced075">Wait for the cursor to change position.</p>
<p class="SOH3">Remarks</p>
<p class="SingleSpaced075">The optional timeout parameter specifies the 
 number of seconds to wait for the change. If a change of cursor position 
 is detected WaitForCursor() returns True. If a timeout occurs the function 
 returns False. If no timeout is specified then WaitForCursor() will not 
 time out. An error will be returned if there is no connection open.</p>
<p class="SOH3">VBScript</p>
<p class="SOH4">Syntax</p>
<p class="Entry100single"><i style="font-style: italic;"><span style="font-style: normal;">[</span> 
 result = <span style="font-style: normal;">]</span> object</i>.WaitForCursor 
 [ <i>timeout</i> ]</p>
<p class="SOH3">Python</p>
<p class="SOH4">Syntax</p>
<p class="Entry100single">[ <span style="font-style: italic;"><i>result</i></span> 
 = ] <span style="font-style: italic;"><i>object</i></span>.WaitForCursor([<span 
	 style="font-style: italic;"><i>timeout</i></span>])</p>
<p class="SingleSpaced075">&#160;</p>
<p class="SOH2"><a name="Screen_Object_Methods_WaitForKey" id="Screen_Object_Methods_WaitForKey"></a>WaitForKey</p>
<p class="SOH3">Description</p>
<p class="SingleSpaced075">Wait for a keypress event.</p>
<p class="SOH3">Remarks</p>
<p class="SingleSpaced075">The optional timeout parameter specifies the 
 number of seconds to wait for a key event. If key event is detected WaitForKey() 
 returns True. If a timeout occurs the function returns False. If no timeout 
 is specified then WaitForKey() will not time out. An error will be returned 
 if there is no connection open.</p>
<p class="SOH3">VBScript</p>
<p class="SOH4">Syntax</p>
<p class="Entry100single"><i style="font-style: italic;"><span style="font-style: normal;">[</span> 
 <span style="font-style: italic;"><i>result =</i></span> <span style="font-style: normal;">]</span></i> 
 <i>object</i>.WaitForKey [ <i>timeout</i> ]</p>
<p class="SOH3">Python</p>
<p class="SOH4">Syntax</p>
<p class="Entry100single">[ <span style="font-style: italic;"><i>result</i></span> 
 = ] <span style="font-style: italic;"><i>object</i></span>.WaitForKey([<span 
	 style="font-style: italic;"><i>timeout</i></span>])</p>
<p class="SingleSpaced075">&#160;</p>
<p class="SOH2"><a name="Screen_Object_Methods_WaitForString" id="Screen_Object_Methods_WaitForString"></a>WaitForString</p>
<p class="SOH3">Description</p>
<p class="SingleSpaced075">Wait for a string.</p>
<p class="SOH3">Remarks</p>
<p class="SingleSpaced075">Wait for the string to appear in the input. 
 The timeout (seconds) parameter is optional. When the string is detected 
 in the input WaitForString() returns True. If a timeout occurs the function 
 returns False. An error will be returned if there is no connection open.</p>
<p class="SOH3">Note</p>
<p class="SingleSpaced075">This method takes an optional bCaseInsensitive 
 parameter that defaults to false (case-sensitive wait string matching). 
 It <span>also takes an optional lWaitTimeout parameter, which defaults 
 to &quot;0&quot; if not specified. To specify the bCaseInsensitive parameter, 
 you must also explicitly specify the lWaitTimeout parameter when using 
 this function in a script.</span></p>
<p class="SOH3">VBScript</p>
<p class="SOH4">Syntax</p>
<p class="Entry100single"><i style="font-style: italic;"><span style="font-style: normal;">[</span> 
 <span style="font-style: italic;"><i>result =</i></span> <span style="font-style: normal;">]</span></i> 
 <i>object</i>.WaitForString <i>string</i> [, <i>timeout</i>] [<span style="font-style: italic;"><i>bCaseInsensitive</i></span>]</p>
<p class="SOH4">Example</p>
<p class="Entry100single"><nobr style="white-space: nowrap;">If crt.screen.WaitForString(&quot;ogin:&quot;, 
 10) &lt;&gt; True Then</nobr></p>
<p class="Entry100single"><nobr style="white-space: nowrap;">&#160;&#160;&#160;&#160;MsgBox 
 &quot;Failed to detect login!&quot;</nobr></p>
<p class="Entry100single"><nobr style="white-space: nowrap;">&#160;&#160;&#160;&#160;Exit 
 Sub</nobr></p>
<p class="Entry100single"><nobr style="white-space: nowrap;">End If</nobr></p>
<p class="SOH3"><nobr style="white-space: nowrap;">P</nobr>ython</p>
<p class="SOH4">Syntax</p>
<p class="Entry100single">[ <span style="font-style: italic;"><i>result</i></span> 
 = ] <span style="font-style: italic;"><i>object</i></span>.WaitForString(<span 
	 style="font-style: italic;"><i>string</i></span> [, <span style="font-style: italic;"><i>timeout</i></span>] 
 [, <span style="font-style: italic;"><i>bCaseInsensitive</i></span>])</p>
<p class="SOH4">Example</p>
<p class="Entry100single">if (crt.Screen.WaitForString(&quot;ogin:&quot;, 
 10) != True):</p>
<p class="Entry100single">crt.Dialog.MessageBox(&quot;Failed to detect 
 login!&quot;)</p>
<p class="SingleSpaced075">&#160;</p>
<p class="SOH2"><span style="font-family: 'Courier New', sans-serif;"><a 
	 name="Screen_Object_Methods_WaitForStrings" id="Screen_Object_Methods_WaitForStrings"></a></span>WaitForStrings</p>
<p class="SOH3">Description</p>
<p class="SingleSpaced075">Wait for one of several strings to appear in 
 the input.</p>
<p class="SOH3">Remarks</p>
<p class="SingleSpaced075">Waits for one of the strings given as arguments 
 to appear in the input. When one of the argument strings is matched in 
 the input, WaitForStrings() returns the argument index of the string that 
 was found (the index of the first string given as an argument to WaitForStrings() 
 is 1). If the optional timeout parameter is specified and a timeout occurs 
 before any of the strings are found, WaitForStrings() returns 0. In the 
 absence of a timeout parameter WaitForStrings() will block without timing 
 out and will not return 0. An error will be returned if there is no connection 
 open.</p>
<p class="SOH3">Notes</p>
<p class="SingleSpaced075">If you are using VBScript, WaitForStrings() 
 will accept an array of strings as its first argument followed by an optional 
 timeout. The value returned by WaitForStrings() will be the index of the 
 string found in the array (1st element in the array = 1). A value of 0 
 will be returned if no strings were found within the timeout period if 
 specified.</p>
<p class="SingleSpaced075">&#160;</p>
<p class="SingleSpaced075">The WaitForString(s) interface works with MBCS 
 languages, and depends only on the &quot;Character Encoding&quot; for 
 the session being able to represent the characters being waited for, not 
 on the characters being displayed correctly on the screen.</p>
<p class="SingleSpaced075">&#160;</p>
<p class="SingleSpaced075">This method takes an optional bCaseInsensitive 
 parameter that defaults to false (case-sensitive wait string matching). 
 It <span>also takes an optional lWaitTimeout parameter, which defaults 
 to &quot;0&quot; if not specified. To specify the bCaseInsensitive parameter, 
 you must also explicitly specify the lWaitTimeout parameter when using 
 this function in a script.</span></p>
<p class="SOH3">VBScript</p>
<p class="SOH4">Syntax</p>
<p class="Entry100single"><i style="font-style: italic;"><span style="font-style: normal;">[</span> 
 <span style="font-style: italic;"><i>result =</i></span> <span style="font-style: normal;">]</span></i> 
 <i>object</i>.WaitForStrings <i>string1,</i> [<i>string2, ..., stringn</i>] 
 [, <i>timeout</i>] [<span style="font-style: italic;"><i>bCaseInsensitive</i></span>]</p>
<p class="SOH4">Example</p>
<p class="Entry100single"><nobr style="white-space: nowrap;">Dim result</nobr></p>
<p class="Entry100single"><nobr style="white-space: nowrap;">result = crt.screen.WaitForStrings(&quot;foo&quot;, 
 &quot;bar&quot;, &quot;quux&quot;, &quot;gee&quot;, 10)</nobr></p>
<p class="Entry100single"><nobr style="white-space: nowrap;">MsgBox result</nobr></p>
<p class="Entry100single"><nobr style="white-space: nowrap;">If result 
 = 3 Then</nobr></p>
<p class="Entry100single"><nobr style="white-space: nowrap;">&#160;&#160;&#160;&#160;MsgBox 
 &quot;Got quux!&quot;</nobr></p>
<p class="Entry100single"><nobr style="white-space: nowrap;">End If</nobr></p>
<p class="Entry100single"><nobr style="white-space: nowrap;">If result 
 = 0 Then</nobr></p>
<p class="Entry100single"><nobr style="white-space: nowrap;">&#160;&#160;&#160;&#160;MsgBox 
 &quot;Timed out!&quot;</nobr></p>
<p class="Entry100single"><nobr style="white-space: nowrap;">End If</nobr></p>
<p class="SOH3"><nobr style="white-space: nowrap;">P</nobr>ython</p>
<p class="SOH4">Syntax</p>
<p class="Entry100single">[ <span style="font-style: italic;"><i>varname</i></span> 
 = ] <span style="font-style: italic;"><i>object</i></span>.WaitForStrings(<span 
	 style="font-style: italic;"><i>StringsArray</i></span> [, <span style="font-style: italic;"><i>timeout</i></span>] 
 [, <span style="font-style: italic;"><i>bcaseInsensitive</i></span>])</p>
<p class="SOH4">Example</p>
<p class="Entry100single">result = crt.Screen.WaitForStrings([&quot;foo&quot;, 
 &quot;bar&quot;, &quot;quux&quot;, &quot;gee&quot;], 10)</p>
<p class="Entry100single">crt.Dialog.MessageBox(str(result))</p>
<p class="Entry100single">if (result == 3):</p>
<p class="Entry100single">crt.Dialog.MessageBox(&quot;Got quux!&quot;)</p>
<p class="Entry100single">if (result == 0):</p>
<p class="Entry100single">crt.Dialog.MessageBox(&quot;Timed out!&quot;)</p>
<p class="SingleSpaced075">&#160;</p>
<p class="SingleSpaced075">&#160;</p>
<!--ForeHelp.EndHotspot-->
<script type="text/javascript" language="javascript1.2">//<![CDATA[
<!--
if (window.writeIntopicBar)
	writeIntopicBar(0);


highlightSearch();
//-->
//]]></script>
</body>
</html>
