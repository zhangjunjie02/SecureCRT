<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="generator" content="Adobe RoboHelp 11" />
<title>Key Terminology</title>
<link rel="StyleSheet" href="SecureCRT.css" type="text/css" />
<style type="text/css">
<!--
.BannerBase { font-size:14pt;
font-weight:bold;
margin:0pt 1px 0pt 0pt;
font-family:Arial, sans-serif;
fhname:Banner Base; }
.Base { font-size:10pt;
margin:0pt 1px 0pt 0pt;
font-family:Arial, sans-serif; }
.Base1 { font-size:10pt;
margin:6pt 0pt 6pt 0pt;
font-family:System, sans-serif;
fhname:Base#1; }
.Base025indent { font-size:10pt;
margin:0pt 0pt 0pt 18pt;
font-family:Arial, sans-serif; }
.Base025indent1 { margin:0pt 0pt 0pt 18pt;
fhname:Base025indent#1; }
.Base025indhanging { font-size:10pt;
margin:0pt 0pt 0pt 18pt;
text-indent:18pt;
font-family:Arial, sans-serif; }
.Base050indent { font-size:10pt;
margin:0pt 0pt 0pt 36pt;
font-family:Arial, sans-serif; }
.Base050indent1 { margin:0pt 0pt 0pt 36pt;
fhname:Base050indent#1; }
.Base050indhanging { font-size:10pt;
margin:0pt 0pt 0pt 36pt;
text-indent:36pt;
font-family:Arial, sans-serif; }
.Base075indent { font-size:10pt;
margin:0pt 0pt 0pt 54pt;
font-family:Arial, sans-serif; }
.BigBoldBase { font-size:11pt;
font-weight:bold;
margin:0pt 0pt 0.05in 0pt;
font-family:Arial, sans-serif; }
.BodyText2 { margin:0pt 0pt 0pt 0.3in;
font-family:Arial, sans-serif;
fhname:Body Text 2; }
.BodyTextIndent2 { margin:0pt 0pt 0pt 0.6in;
font-family:Arial, sans-serif;
fhname:Body Text Indent 2; }
.Bullet1 { font-size:10pt;
margin:0pt 0pt 2pt 0.2097in;
text-indent:-0.2097in;
font-family:Arial, sans-serif; }
.bullet11 { font-size:8pt;
margin:0pt 0.014in 0pt 0.2in;
text-indent:-0.2in;
font-family:Arial, sans-serif;
fhname:bullet1#1; }
.Bullet2 { font-size:10pt;
margin:0pt 0pt 0pt 36pt;
text-indent:-18pt;
font-family:Arial, sans-serif; }
.Bullet3 { font-size:10pt;
margin:0pt 0pt 0pt 54pt;
font-family:Arial, sans-serif; }
.Bullet4 { font-size:10pt;
margin:0pt 0pt 0pt 72pt;
text-indent:72pt;
font-family:Arial, sans-serif; }
CODE { font-size:10pt;
font-family:"Courier New" , sans-serif;
fhtype:character; }
.CODE1 { font-size:10pt;
font-family:"Courier New" , sans-serif;
fhname:CODE#1;
fhtype:character; }
.CodeText { font-size:10pt;
font-family:"Courier New" , sans-serif; }
.CodeText075Indent { font-size:10pt;
margin:0pt 0pt 0pt 54pt;
font-family:"Courier New" , sans-serif; }
.DefaultParagraphFont { font-size:12pt;
font-family:"Times New Roman" , sans-serif;
fhname:Default Paragraph Font;
fhtype:character; }
.DefaultParagraphFont1 { font-size:12pt;
font-family:"Times New Roman" , sans-serif;
fhname:Default Paragraph Font#1;
fhtype:character; }
.Dialog { font-size:10pt;
font-weight:bold;
font-family:Arial, sans-serif;
fhtype:character; }
.Entry { font-size:10pt;
font-family:"Courier New" , sans-serif; }
.Entry025indent { font-size:10pt;
margin:0pt 0pt 0pt 18pt;
font-family:"Courier New" , sans-serif; }
.Entry025indent1 { margin:6pt 0pt 6pt 18pt;
font-family:"Courier New" , sans-serif;
fhname:Entry025indent#1; }
.Entry050indent { font-size:10pt;
margin:0pt 0pt 0pt 36pt;
font-family:"Courier New" , sans-serif; }
.Entry075indent { font-size:10pt;
margin:0pt 0pt 0pt 54pt;
font-family:"Courier New" , sans-serif; }
.Entry100indent { font-size:10pt;
margin:0pt 0pt 0pt 72pt;
font-family:"Courier New" , sans-serif; }
.ExampleProgram { font-size:10pt;
font-family:"Courier New" , sans-serif; }
.Field { font-size:10pt;
font-weight:bold;
margin:0pt 0pt 0pt 18pt;
font-family:Arial, sans-serif; }
.Figure { font-style:italic; }
.footnotereference { font-size:12pt;
vertical-align:super;
font-family:"Times New Roman" , sans-serif;
fhname:footnote reference;
fhtype:character; }
.footnotetext { fhname:footnote text; }
.GlossaryTerm { font-size:11pt;
font-weight:bold;
margin:0pt 0pt 3pt 0pt;
font-family:Arial, sans-serif;
fhname:Glossary Term; }
.Group { font-size:10pt;
font-weight:bold;
margin:0.0166in 0pt 0.0166in 0pt;
font-family:Arial, sans-serif; }
.Heading { font-size:12pt;
font-weight:bold;
margin:12pt 0pt 6pt 0pt;
font-family:System, sans-serif; }
.heading1 { font-size:16pt;
font-weight:bold;
font-style:italic;
fhname:heading 1; }
.heading11 { font-weight:bold;
font-family:Arial, sans-serif;
fhname:heading 1#1; }
.heading2 { font-size:14pt;
font-weight:bold;
margin:0pt 0pt 0pt 18pt;
fhname:heading 2; }
.heading21 { font-weight:bold;
margin:0pt 0pt 0pt 0.3in;
font-family:Arial, sans-serif;
fhname:heading 2#1; }
.heading3 { font-size:12pt;
font-weight:bold;
margin:0pt 0pt 0pt 36pt;
fhname:heading 3; }
.heading4 { font-size:9pt;
font-weight:bold;
font-family:Arial, sans-serif;
fhname:heading 4;
text-decoration:overline; }
.heading41 { font-size:10pt;
font-weight:bold;
font-style:italic;
margin:0pt 0pt 0pt 36pt;
fhname:heading 4#1; }
.heading5 { font-size:9pt;
font-weight:bold;
margin:0pt 0pt 0pt 18pt;
font-family:Arial, sans-serif;
fhname:heading 5;
text-decoration:underline; }
.heading51 { font-size:11pt;
font-weight:bold;
margin:0pt 0pt 0pt 54pt;
fhname:heading 5#1; }
.heading5Body { font-size:9pt;
margin:0pt 0pt 0pt 36pt;
font-family:Arial, sans-serif;
fhname:heading 5:  Body; }
.heading6 { font-size:9pt;
font-weight:bold;
font-style:italic;
margin:0pt 0pt 0pt 36pt;
fhname:heading 6; }
.heading61 { font-weight:bold;
font-style:italic;
margin:0pt 0pt 0pt 72pt;
fhname:heading 6#1; }
.Heading6Body { font-size:10pt;
margin:0pt 0pt 0pt 54pt;
font-family:Arial, sans-serif;
fhname:Heading 6:  Body; }
.heading8 { font-weight:bold;
text-align:center;
fhname:heading 8; }
.Hyperlink { font-size:12pt;
color:#0000ff;
font-family:"Times New Roman" , sans-serif;
fhtype:character;
text-decoration:underline; }
.Hyperlink1 { font-size:12pt;
color:#0000ff;
font-family:"Times New Roman" , sans-serif;
fhname:Hyperlink#1;
fhtype:character;
text-decoration:underline; }
.Label1 { font-size:8pt;
font-weight:bold;
font-family:Arial, sans-serif;
fhname:Label#1;
fhtype:character; }
.MenuCommand { font-size:10pt;
font-weight:bold;
margin:12pt 0pt 0pt 0pt;
font-family:Arial, sans-serif; }
.MenuCommand2ndLevel { font-size:10pt;
font-weight:bold;
margin:6pt 0pt 0pt 18pt;
font-family:Arial, sans-serif; }
.NewCodeText { font-size:10pt;
margin:0pt 1px 0pt 0pt;
font-family:"Courier New" , sans-serif; }
.Normal { font-size:12pt;
margin:5pt 0pt 5pt 0pt;
font-family:"Times New Roman" , sans-serif; }
.Normal1 { font-size:10pt;
margin:0pt 1px 0pt 0pt;
font-family:"Times New Roman" , sans-serif;
fhname:Normal#1; }
.Normal2 { font-size:12pt;
margin:0pt 1px 0pt 0pt;
font-family:"Times New Roman" , sans-serif;
fhname:Normal#2; }
.Normal3 { font-size:12pt;
margin:0pt 1px 0pt 0pt;
font-family:Arial, sans-serif;
fhname:Normal#3; }
.NoteBold { font-size:10pt;
font-weight:bold;
font-family:Arial, sans-serif;
fhtype:character; }
.NoteTest025indent { font-size:10pt;
margin:0pt 0pt 0pt 36pt;
font-family:Arial, sans-serif; }
.NoteText { font-size:10pt;
margin:0pt 0pt 0pt 18pt;
font-family:Arial, sans-serif; }
.Number1 { font-size:10pt;
font-family:Arial, sans-serif; }
.Number2 { font-size:10pt;
font-family:Arial, sans-serif; }
.Number3 {  }
.Number4 {  }
.Number5 {  }
.ObjHead025Indent { font-size:10pt;
font-weight:bold;
margin:0pt 0pt 0.028in 18pt;
font-family:Arial, sans-serif;
text-decoration:underline; }
.ObjHead050Indent { font-size:10pt;
font-weight:bold;
font-style:italic;
margin:0pt 0pt 0pt 36pt;
font-family:Arial, sans-serif; }
.Seealso { margin:24pt 0pt 6pt 0pt; }
.Step { font-size:10pt;
margin:0pt 0pt 12pt 18pt;
text-indent:-18pt;
font-family:Arial, sans-serif; }
.Step2 { font-size:10pt;
margin:0pt 0pt 12pt 36pt;
text-indent:-18pt;
font-family:Arial, sans-serif; }
.TableBody { font-size:10pt;
margin:3pt 0pt 3pt 0pt;
font-family:Arial, sans-serif; }
body { background-color:#ffffff; }
-->
</style>
<!--ForeHelp.Ignore-->

<script src="./sniffer.js" type="text/javascript" language="JavaScript1.2">
</script>
<script src="./hhscript.js" type="text/javascript" language="JavaScript1.2">
</script>
<script src="./SecureCRT.js" type="text/javascript" language="JavaScript1.2">
</script>
<script src="./fh_dhtml.js" type="text/javascript" language="JavaScript1.2">
</script><!--ForeHelp.EndIgnore-->
<script type="text/javascript" language="JavaScript">
//<![CDATA[
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//]]>
</script>
<style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute;
left:0px;
top:0px;
z-index:4;
visibility:hidden; }
-->
</style>
<script type="text/javascript" language="javascript1.2" src="whmsg.js" charset="utf-8"></script>
<script type="text/javascript" language="javascript" src="whver.js" charset="utf-8"></script>
<script type="text/javascript" language="javascript1.2" src="whutils.js" charset="utf-8"></script>
<script type="text/javascript" language="javascript1.2" src="whproxy.js" charset="utf-8"></script>
<script type="text/javascript" language="javascript1.2" src="whlang.js" charset="utf-8"></script>
<script type="text/javascript" language="javascript1.2" src="whtopic.js" charset="utf-8"></script>

</head>
<body bgproperties="FIXED"><script type="text/javascript" language="javascript1.2">//<![CDATA[
<!--
if (window.gbWhTopic)
{
	var strUrl = document.location.href;
	var bc = 0;
	var n = strUrl.toLowerCase().indexOf("bc-");
	if(n != -1)
	{
		document.location.replace(strUrl.substring(0, n));
		bc = strUrl.substring(n+3);
	}

	if (window.addTocInfo)
	{
	addTocInfo("Secure Connections\nKey Terminology");
addAvenueInfo("Secure Connections","Changing_the_Passphrase_for.htm","GO_SSH_Host_Keys.htm");
addButton("show",BTN_TEXT,"Show","","","","",0,0,"","","");

	}
	if (window.writeBtnStyle)
		writeBtnStyle();

	if (window.writeIntopicBar)
		writeIntopicBar(1);

	
	document.write("<p style=\"text-align:right\"> ");
AddMasterBreadcrumbs("SecureCRT.htm", "", ">", "Home", "Welcome.htm");
document.write("<a href=\"Security_Considerations.htm\">Secure Connections<\/a> > Key Terminology<\/p>");

}
else
	if (window.gbIE4)
		document.location.reload();

onLoadHandler = function()
{
  if (window.setRelStartPage)
	{
	setTimeout("setRelStartPage('SecureCRT.htm');", 1)

    setTimeout("UpdateBreadCrumbsMarker();", 1);
	}
}

if (window.addEventListener){  
	window.addEventListener('load', onLoadHandler, false);   
} else if (window.attachEvent){  
	window.attachEvent('onload', onLoadHandler);  
}

function onSetStartPage()
{
  autoSync(0);
  sendSyncInfo();
  sendAveInfoOut();
}
//-->
//]]></script>
<script type="text/javascript" src="./ehlpdhtm.js" language="JavaScript1.2"></script>



<!--ForeHelp.EndIgnore-->
<!--ForeHelp.Keyword KKEYS="private keys;public keys;public-private keys;public-key authentication;public-key encryption;host keys"-->
<!--ForeHelp.EndKeyword-->
<!--ForeHelp.Banner-->
<p class="Banner"><span><img src="secureicon.bmp" alt="SecureCRT Icon" title="SecureCRT Icon" width="32" height="32" border="0" /></span> &#160;Key Terminology</p>
<!--ForeHelp.Ignore-->
<hr align="center" />
<!--ForeHelp.EndIgnore--><!--ForeHelp.EndBanner-->
<p>Most <a href="javascript:TextPopup(this)" id="HotSpot48185" class="glossterm">encryption</a><script type="text/javascript" language="JavaScript1.2">//<![CDATA[
TextPopupInit('HotSpot48185', 'POPUP48185');
//]]></script><span class="glosstext" id="POPUP48185" style="display: none;"> The process of converting a data transmission into a secret format that cannot easily be read by unauthorized individuals.  See also: decryption.</span> technologies are based around a system of “keys” that allow information to be encoded and then decoded. The terms “private key”, “public key”, and “host key” are used extensively in <a href="javascript:TextPopup(this)" id="HotSpot26536" class="glossterm">SSH</a><script type="text/javascript" language="JavaScript1.2">//<![CDATA[
TextPopupInit('HotSpot26536', 'POPUP26536');
//]]></script><span class="glosstext" id="POPUP26536" style="display: none;"> SSH is an acronym for the Secure Shell protocol.  A communications protocol used to encrypt network traffic between a client and a server.</span> communication and can be confusing to those who are new to the terminology. This topic hopes to define and clarify these terms and their use.</p>
<p class="SectionHead"><a name="Private_Key" id="Private_Key"></a>Private Key</p>
<p>A private key is one of two keys used in public-key encryption (the other being a public key). The user keeps the private key secret and uses it to encrypt outgoing messages and decrypt incoming messages.</p>
<p>The permissions for the private key should be set so that only the owner has read/write access. This is especially important if the key does not have a passphrase.</p>
<p class="SectionHead"><a name="Public_key" id="Public_key"></a>Public Key</p>
<p>A public key is one of two keys used in public-key encryption (the other being a private key). The user releases a copy of this key to the public to allow anyone to use it for encrypting messages to be sent to the user and for decrypting messages received from the user.</p>
<p class="SectionHead"><a name="Public_Key_Encryption" id="Public_Key_Encryption"></a>Public-Key Encryption</p>
<p>A scheme using an asymmetric algorithm to create a pair of keys for encryption: a public key encrypts data, and a corresponding private key decrypts it. In some situations, such as digital signatures, the process is reversed: the sender uses a private key to create a unique number that can be read by anyone who has the corresponding public key. The agreement of the public and private keys verifies that the message is truly from the sender.</p>
<p class="SectionHead"><a name="Public_Key_Authentication" id="Public_Key_Authentication"></a>Public-Key Authentication</p>
<p>In public-key <a href="javascript:TextPopup(this)" id="HotSpot36918" class="glossterm">authentication</a><script type="text/javascript" language="JavaScript1.2">//<![CDATA[
TextPopupInit('HotSpot36918', 'POPUP36918');
//]]></script><span class="glosstext" id="POPUP36918" style="display: none;"> The process of verifying that an individual truly is who he or she claims to be.  Supplying a password is a very common method of authentication.  The most secure method of authentication supported in SecureCRT is public-key authentication.  See also: identity file, public-private key pair.</span> , public-private key pairs are used to identify a user to an <a href="javascript:TextPopup(this)" id="HotSpot33769" class="glossterm">SSH2</a><script type="text/javascript" language="JavaScript1.2">//<![CDATA[
TextPopupInit('HotSpot33769', 'POPUP33769');
//]]></script><span class="glosstext" id="POPUP33769" style="display: none;"> The second version of the SSH protocol which provides a way to encrypt network traffic between a client and a server, with a slightly different set of security features than the SSH1 protocol provides.</span> <a href="javascript:TextPopup(this)" id="HotSpot27656" class="glossterm">server</a><script type="text/javascript" language="JavaScript1.2">//<![CDATA[
TextPopupInit('HotSpot27656', 'POPUP27656');
//]]></script><span class="glosstext" id="POPUP27656" style="display: none;"> A computer program that provides services to other computer programs (called clients).  Often the computer on which a server program runs is also called a server.  The term host is often used as a synonym for server.</span> . A user creates both a public and private key, and then transfers a copy of the public key to an SSH2 server to which the user wants secure access. The private key is kept on the user’s local machine and is used to verify the identity of the user when the user attempts to connect to the SSH2 server. The public and private keys must be correct for the server to allow the <a href="javascript:TextPopup(this)" id="HotSpot30825" class="glossterm">connection</a><script type="text/javascript" language="JavaScript1.2">//<![CDATA[
TextPopupInit('HotSpot30825', 'POPUP30825');
//]]></script><span class="glosstext" id="POPUP30825" style="display: none;"> A data path or circuit between two computers over a phone line, network cable, or other means.</span> .</p>
<p class="SectionHead"><a name="Host_Key" id="Host_Key"></a>Host Key</p>
<p>A host key is the public key in a <a href="javascript:TextPopup(this)" id="HotSpot32804" class="glossterm">public-private key pair</a><script type="text/javascript" language="JavaScript1.2">//<![CDATA[
TextPopupInit('HotSpot32804', 'POPUP32804');
//]]></script><span class="glosstext" id="POPUP32804" style="display: none;"> A pair of keys used with RSA or DSA authentication.  The public key is usually kept in a file named Identity.pub, which is then transferred to the remote SSH server and appended to the user's authorized_keys file.  Another file usually named identity contains both the public key and the corresponding private key.  This file is kept on the local machine and is used by SecureCRT with public key or RSA authentication methods.</span> that is used to identify a server host to a <a href="javascript:TextPopup(this)" id="HotSpot48728" class="glossterm">client</a><script type="text/javascript" language="JavaScript1.2">//<![CDATA[
TextPopupInit('HotSpot48728', 'POPUP48728');
//]]></script><span class="glosstext" id="POPUP48728" style="display: none;"> A computer or application that uses services provided by a server.</span> in SSH2 connections. When a client connects to a server host, the server sends a host key to the client (the server keeps the private key secret). The first time the client connects to a server, the client’s user is asked if they want to save the host key. If the user chooses to save the host key, the client adds the key to its host key database. Each time the client connects to that server, the client expects to receive the same key. If the server sends a different host key, the client is alerted to the fact that there may be a problem, which could be anything from a corrupt key file to a fraudulent server. The client then takes whatever action that is required to accept or reject the connection. Also see <!--ForeHelp.Hotspot JUMP="Accepting_a_Host_Key"--><!--ForeHelp.EndHotspot--><a href="Accepting_a_Host_Key.htm">"Accepting a Host Key"</a> and <!--ForeHelp.Hotspot JUMP="Global_Options_SSH2_Host_Keys"--><!--ForeHelp.EndHotspot--><a href="GO_SSH_Host_Keys.htm">Global Options/SSH2 Host Keys</a>.</p>
<p>&#160;</p>
<p>&#160;</p>
<!--ForeHelp.EndHotspot-->
<script type="text/javascript" language="javascript1.2">//<![CDATA[
<!--
if (window.writeIntopicBar)
	writeIntopicBar(0);


highlightSearch();
//-->
//]]></script>
</body>
</html>
